syntax = "proto3";

package haomo.hios;

/*!< 自车参数，所有参数按照国际单位制，例如：m、m/s、rad、rad/s */
message VehicleParameter {
    float wheelbase = 1;        /*!< 轴距 单位m */
    float wheeltrackF = 2;      /*!< 前轮距 单位m */
    float wheeltrackR = 3;	     /*!< 后轮距 单位m */
    float overhangF = 4;        /*!< 前悬 单位m */
    float overhangR = 5;        /*!< 后悬 单位m */
    float wheeldiameter = 6;    /*!< 轮径 单位m */
    float wheelwidth = 7;       /*!< 轮宽 单位m */
    float overalllength = 8;      /*!< 外廓长 单位m */
    float overallwidth = 9;       /*!< 外廓宽（加后视镜） 单位m or 最大车宽*/
    float overallhigh = 10;       /*!< 外廓高 单位m */
    float minturningradius = 11;  /*!< 最小转弯半径 单位m */
    float maxgradeability = 12;   /*!< 最大爬坡度 单位% */
    float maxsteeringangle = 13;  /*!< 最大方向盘转角 单位rad */
    float front_edge_to_center = 14;  /*!< 后轴中心到车头的距离(前杠前边缘) 单位m,以下类似 */
    float rear_edge_to_center = 15;   
    float left_edge_to_center = 16;
    float right_edge_to_center = 17;
    float max_abs_speed_when_stopped = 18;  /*!< 刹停前能够检测到的最大速度 单位m/s */
    float max_acceleration = 19;   /*!< 最大加速度 单位m/s^2 正数*/
    float max_deceleration = 20;   /*!< 最大减速度 单位m/s^2 正数*/
    float max_steer_angle_rate = 21;   /*!< 方向盘最大转角速率 单位rad/s */
    float steer_ratio = 22;           /*!< 方向盘与前轮转角传动比*/
}

message Rotation {
    float yaw = 1;
    float pitch = 2;
    float roll = 3;
}

message RotQuaternion {
    float w = 1;
    float x = 2;
    float y = 3;
    float z = 4;
}

message Translation {
    float x = 1;
    float y = 2;
    float z = 3;
}

message SensorPose {
    Translation translation = 1;    // 传感器在车身坐标系下的位置
    Rotation attitude_ypr      = 2;    // 传感器在车身坐标系下的姿态, 欧拉角表示
    RotQuaternion attitude  = 3;       // 传感器在车身坐标系下的姿态, 四元数表示
}

// from camera coordinate system to the car coordinate system
message CameraParameter {
    enum ImageFormat {
        RGB = 0;
        BGR = 1;
        RGBA = 2;
        NONE = 3;
    }
    enum CameraType {
        option allow_alias = true;
        YULAN = 0;
        WEISEN2 = 0;  /* 20 21 22 新为森*/
        ENTRON = 1;
        TIANTONG = 2;
        WEISEN = 2;
        SENYUN = 3;
    }
    enum CameraNameType {
        front_long_camera = 0; //前长焦
        front_middle_camera = 1; //前中距
        front_short_camera = 2; //前短距
        rear_middle_camera = 3; //后中距
        rear_short_camera = 4; //弃用
        front_right_camera = 5; //右前广角(右前侧摄像头)
        front_left_camera = 6; //左前广角(左前侧摄像头)
        rear_right_camera = 7; //右后广角(右后侧摄像头)
        rear_left_camera = 8; //左后广角(左后侧摄像头)
        left_short_camera = 9; //弃用
        right_short_camera = 10; //弃用
        front_fisheye_camera = 11; //前鱼眼
        left_fisheye_camera = 12; //左鱼眼
        right_fisheye_camera = 13; //右鱼眼
        rear_fisheye_camera = 14; //后鱼眼
    }

	enum CameraModelType {
	    PINHOLE = 0;
        MEI = 1;
        EQUIDISTANT = 2;
	}

    CameraNameType name = 1;       /*!< 传感器名字,如front_long_camera */
    float xi = 2;                  /*!< 鱼眼摄像头光心偏置系数 */
    float fx = 3;                  /*!< 焦距x方向(像素) */
    float fy = 4;                  /*!< 焦距y方向(像素) */
    float cx = 5;                  /*!< 主点x方向(像素) */
    float cy = 6;                  /*!< 主点y方向(像素) */
    repeated float distortion = 7; /*!< 畸变系数 顺序：for middle camera：k1 k2 k3 p1, for fisheye camera: 等距模型 k1 k2 k3 k4*/
    int32 image_width = 8;         /*!< 图像宽度 */
    int32 image_height = 9;        /*!< 图像高度 */
    ImageFormat image_format = 10;

    Rotation rotation = 11;       //弃用
    Translation translation = 12; //弃用

    CameraModelType camera_model = 13;   /*!< 摄像头模型 PINHOLE | MEI */

    string model = 14;             /*!< 传感器型号，如sekonix SF3323 */
    string deployment = 15;        /*!< Deployment position */

    CameraType type = 16;          /*!< camera 型号编码*/

    Rotation rotation_cam2imu = 17;        /*!< 前广角到imu旋转 */
    Translation translation_cam2imu = 18;  /*!< 前广角到imu平移 */
    SensorPose pose = 19;       // 传感器在车身下的姿态
}

message RadarParameter {
    enum RadarNameType {
        front_middle_long_radar = 0;
        rear_middle_long_radar = 1;
        front_left_short_radar = 2;
        front_right_short_radar = 3;
        rear_left_short_radar = 4;
        rear_right_short_radar = 5;
    }

    RadarNameType name = 1;        /*!< 传感器名字 */
    Rotation rotation = 2;	//弃用
    Translation translation = 3;	//弃用
    SensorPose pose = 4;    // 传感器在车身下的姿态

    string model = 5;              /*!< 传感器型号，如Delphi ESR */
}

message Coord3d {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Matrix3d {
    float m00 = 1;
    float m01 = 2;
    float m02 = 3;

    float m10 = 4;
    float m11 = 5;
    float m12 = 6;
    
    float m20 = 7;
    float m21 = 8;
    float m22 = 9;
}

message ImuParameter {
    string model = 1;
    int32 frequency = 2;
    int32 status = 3;          /* 0: raw data; 1: calibrated data; */
    Coord3d gyro_offset = 4;
    Coord3d accel_offset = 5;
    Rotation euler_offset = 6;
    Matrix3d accel_misalignment = 7;
    Matrix3d gyro_misalignment = 8;
    Matrix3d accel_scale = 9;
    Matrix3d gyro_scale = 10;
    Rotation rotation_imu2vehicle = 11;        //弃用
    Translation translation_imu2vehicle = 12;  //弃用
    SensorPose pose = 13; // 传感器在车身下的姿态
}

message UltrasonicFov {
    float alpha = 1;            /* first opening angle, unit: rad */
    float range_alpha = 2;      /* range  of first opening field, unit: m */
    float beta = 3;             /* second opening angle, unit: rad */
    float range_beta = 4;       /* range of second opening field, unit: m */
    float min_range = 5;
    float max_range = 6;
    float vertical_fov = 7;
}

message UltrasonicParameter {
    enum UltrasonicFunctionType {
        UPA = 0;
        APA = 1;
    }

    int32 sensor_pos = 1;            /* sensor position: 1 ~ 12  */
    Translation translation = 2;          //弃用
    Rotation rotation = 3;                //弃用
    UltrasonicFov fov = 4;                 /* FOV of sonar */
    UltrasonicFunctionType ultrasonic_function_type = 5;
    int32 lin_id = 6;             /* sensor lin_id */
    int32 group_id = 7;           /* sensor group_id */
    SensorPose pose = 13; // 传感器在车身下的姿态
}

message LidarParameter{
    enum LidarName {
        NONE                = 0;
        FRONT_LIDAR         = 1;
        FRONT_LEFT_LIDAR    = 2;
        FRONT_RIGHT_LIDAR   = 3;
        REAR_LIDAR          = 4;
        MIDDLE_LIDAR        = 5;
        MIDDLE_LEFT_LIDAR   = 6;
        MIDDLE_RIGHT_LIDAR  = 7;
    }
    enum LidarType {
        RS_16 = 0;
        RS_32 = 1;
        RS_128 = 2;
        RS_M1 = 3;
        DJ_Mid70 = 4;
    }
    SensorPose pose       = 1;    // 传感器在车身坐标系下的位姿
    LidarName name        = 2;
    string deployment     = 3;
    LidarType type        = 4;
}

message RTKParameter{
    SensorPose pose       = 1;    // 传感器在车身坐标系下的位姿
}

message GPSParameter{
    SensorPose pose       = 1;    // 传感器在车身坐标系下的位姿
}

message WheelOdometerParameter{
    SensorPose pose                   = 1;    // 传感器在车身坐标系下的位姿
    float front_left_radius     = 2;    // 前左轮半径
    float front_right_radius    = 3;    // 前右轮半径
    float rear_left_radius      = 4;    // 后左轮半径
    float rear_right_radius     = 5;    // 后左轮半径
}

message SensorConfig {
    string car_id = 1; 		    /*!< 车辆的编号 MKZ001,MKZ002* 算法中使用此id来区分配置*/
    string car_plate = 2;		    /*!< 车牌号 京Q25EF1 方便对应到具体车辆，程序中不使用*/
    repeated CameraParameter cam_param = 4;         /*!< 相机参数 有多组不同名字的相机*/
    repeated RadarParameter radar_param = 5;        /*!< 雷达参数 有多组不同名字的雷达*/
    ImuParameter imu_param = 6;            /*IMU parameters */
    repeated UltrasonicParameter ultrasonic_param = 7;      /*ultrasonic parameters. */
    repeated LidarParameter lidar_param     = 8;        // 激光雷达参数 有多组不同名字的雷达
    RTKParameter rtk_param                  = 9;
    GPSParameter gps_param                  = 10;
    WheelOdometerParameter wheel_odo_param  = 11;   
}

message UltrasonicConfigVector {
    repeated UltrasonicParameter ultrasonic_params = 1;      /*ultrasonic parameters. */
}

message HardwareConfig {
    SensorConfig sensor_config = 1;
    VehicleParameter vehicle_param = 3;    /*!< 车身参数 */
}
